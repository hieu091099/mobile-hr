"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _checkBox = _interopRequireDefault(require("../components/checkBox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react-native/no-inline-styles */
const PaperSelect = ({
  label,
  arrayList,
  selectedArrayList,
  multiEnable,
  errorText,
  value,
  onSelection,
  dialogStyle,
  dialogTitleStyle,
  searchStyle,
  checkboxColor,
  checkboxLabelStyle,
  checkboxUncheckedColor,
  errorStyle,
  textInputMode,
  underlineColor,
  activeUnderlineColor,
  activeOutlineColor,
  outlineColor,
  textInputBackgroundColor,
  textInputColor,
  textInputHeight,
  dialogButtonLabelStyle
}) => {
  const [selectText, setSelectText] = (0, _react.useState)(value);
  const [searchKey, setSearchKey] = (0, _react.useState)('');
  const [arrayHolder, setArrayHolder] = (0, _react.useState)([...arrayList]);
  const [list, setList] = (0, _react.useState)([...arrayList]);
  const [selectedList, setSelectedList] = (0, _react.useState)([...selectedArrayList]);
  const selectInputRef = (0, _react.useRef)(null);
  const [visible, setVisible] = (0, _react.useState)(false);

  const showDialog = () => setVisible(true);

  const _hideDialog = () => {
    var data = [...list];
    var selectedData = [...selectedList];
    let selected = [];
    selectedData.forEach(val => {
      data.forEach(el => {
        if (val._id === el._id) {
          selected.push(el.value);
        }
      });
    });
    value = selected.join();
    setSelectText(selected.join());
    onSelection({
      text: selected.join(),
      selectedList: selectedData
    });
    setVisible(false);

    if (selectInputRef && selectInputRef.current) {
      selectInputRef.current.blur();
    }
  };

  const _onFocus = () => {
    setArrayHolder(arrayList);
    setList(arrayList);
    showDialog();
  };

  const _onChecked = item => {
    const selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.indexOf(item);

    if (indexSelected > -1) {
      selectedData.splice(indexSelected, 1);
    } else {
      selectedData.push(item);
    }

    setSelectedList(selectedData);
  };

  const _onCheckedSingle = item => {
    var selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.indexOf(item);

    if (indexSelected > -1) {
      // selectedData.splice(indexSelected, 1);
      selectedData = [];
    } else {
      selectedData = [];
      selectedData.push(item);
    }

    setSelectedList(selectedData);
  };

  const _exists = item => {
    return selectedList.indexOf(item) > -1 ? true : false;
  };

  const _isCheckedAll = () => {
    const data = [...list];
    const selectedData = [...selectedList];
    return selectedData.length !== 0 && selectedData.length === data.length;
  };

  const _checkAll = () => {
    const data = [...list];
    var selectedData = [...selectedList];

    if (selectedData.length === data.length) {
      selectedData = [];
    } else if (selectedData.length === 0 || selectedData.length > 0) {
      selectedData = data.slice(0);
    }

    setSelectedList(selectedData);
  };

  const _renderListForMulti = () => {
    return list.map((item, key) => {
      return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
        style: {
          flexDirection: 'row',
          alignItems: 'center'
        },
        key: key,
        onPress: () => {
          _onChecked(item);
        }
      }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
        isChecked: _exists(item),
        label: item.value,
        checkboxLabelStyle: checkboxLabelStyle,
        checkboxColor: checkboxColor,
        checkboxUncheckedColor: checkboxUncheckedColor
      }));
    });
  };

  const _renderListForSingle = () => {
    return list.map((item, key) => {
      return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
        style: {
          flexDirection: 'row',
          alignItems: 'center'
        },
        key: key,
        onPress: () => {
          _onCheckedSingle(item);
        }
      }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
        isChecked: _exists(item),
        label: item.value,
        checkboxLabelStyle: checkboxLabelStyle,
        checkboxColor: checkboxColor,
        checkboxUncheckedColor: checkboxUncheckedColor
      }));
    });
  };

  const _filterFunction = text => {
    setSearchKey(text);
    const newData = arrayHolder.filter(item => item.value.toLowerCase().includes(text.toLowerCase()));
    setList(newData);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.TextInput, {
    ref: selectInputRef,
    style: {
      backgroundColor: textInputBackgroundColor || '#fff',
      color: textInputColor || '#000',
      height: textInputHeight
    },
    label: label,
    underlineColor: underlineColor || 'black',
    activeUnderlineColor: activeUnderlineColor || 'black',
    activeOutlineColor: activeOutlineColor || 'black',
    outlineColor: outlineColor || 'black',
    mode: textInputMode || 'outlined',
    onFocus: _onFocus,
    showSoftInputOnFocus: false,
    value: selectText,
    right: /*#__PURE__*/_react.default.createElement(_reactNativePaper.TextInput.Icon, {
      style: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        alignContent: 'center',
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      },
      size: 15,
      name: "chevron-down"
    })
  }), errorText ? /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: { ...errorStyle,
      color: (errorStyle === null || errorStyle === void 0 ? void 0 : errorStyle.color) || 'red'
    }
  }, errorText) : null), /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Portal, null, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Dialog, {
    style: {
      backgroundColor: (dialogStyle === null || dialogStyle === void 0 ? void 0 : dialogStyle.backgroundColor) || 'white',
      borderRadius: (dialogStyle === null || dialogStyle === void 0 ? void 0 : dialogStyle.borderRadius) || 5
    },
    visible: visible,
    dismissable: false
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Dialog.Title, {
    style: dialogTitleStyle
  }, label), /*#__PURE__*/_react.default.createElement(_reactNativePaper.Dialog.Content, null, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Dialog.ScrollArea, {
    style: {
      height: 300,
      paddingVertical: 10,
      paddingHorizontal: 0
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Searchbar, {
    value: searchKey,
    placeholder: "Search",
    onChangeText: text => _filterFunction(text),
    iconColor: (searchStyle === null || searchStyle === void 0 ? void 0 : searchStyle.iconColor) || 'black',
    style: {
      borderRadius: (searchStyle === null || searchStyle === void 0 ? void 0 : searchStyle.borderRadius) || 5,
      borderColor: (searchStyle === null || searchStyle === void 0 ? void 0 : searchStyle.borderColor) || '#e5e5e5',
      backgroundColor: (searchStyle === null || searchStyle === void 0 ? void 0 : searchStyle.backgroundColor) || '#e5e5e5',
      borderWidth: 0.5,
      marginBottom: 10,
      marginHorizontal: 8,
      color: (searchStyle === null || searchStyle === void 0 ? void 0 : searchStyle.textColor) || '#000'
    }
  }), multiEnable === true && /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    onPress: () => {
      _checkAll();
    }
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    isChecked: _isCheckedAll(),
    label: "Select All",
    checkboxLabelStyle: checkboxLabelStyle,
    checkboxColor: checkboxColor,
    checkboxUncheckedColor: checkboxUncheckedColor
  })), /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, {
    style: {
      width: '100%'
    },
    persistentScrollbar: true,
    showsVerticalScrollIndicator: true
  }, multiEnable === true ? _renderListForMulti() : _renderListForSingle()))), /*#__PURE__*/_react.default.createElement(_reactNativePaper.Dialog.Actions, {
    style: {
      marginTop: -20
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Button, {
    labelStyle: dialogButtonLabelStyle,
    onPress: _hideDialog
  }, "Done"))))));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    marginBottom: 10
  }
});

var _default = /*#__PURE__*/(0, _react.memo)(PaperSelect);

exports.default = _default;
//# sourceMappingURL=paperSelect.js.map